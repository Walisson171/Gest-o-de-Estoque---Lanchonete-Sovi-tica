//falta lanches no cardapio
//nao esta decontando a quantidade certa do estoque
//esta faltando igredientes para opção adicionar ao estoque
//falta fazer a conexao SQL


import tkinter as tk
from tkinter import messagebox, ttk

# Classe para representar um Ingrediente
class Ingrediente:
    def __init__(self, nome, categoria, quantidade, unidade, quantidade_minima):
        self.nome = nome
        self.categoria = categoria
        self.quantidade = quantidade  # Quantidade total em estoque
        self.unidade = unidade  # Unidade de medida (por exemplo, "unidade", "g", "ml")
        self.quantidade_minima = quantidade_minima

    def __str__(self):
        return f"{self.nome} - {self.quantidade} {self.unidade}(s) (Min: {self.quantidade_minima})"


# Cardápio de Lanches
cardapio = {
    "Hot Dog": ["pão", "salsicha", "vinagrete", "maionese", "ketchup", "mostarda", "batata palha"],
    "X Burguer": ["pão", "hamburguer", "queijo", "ketchup", "maionese", "mostarda"],
    "X Salada": ["pão", "hamburguer", "tomate", "presunto", "queijo", "alface", "maionese", "ketchup", "mostarda"],
    "Misto Quente": ["pão", "presunto", "queijo", "batata palha"],
    "Bauru": ["pão", "presunto", "queijo", "tomate", "maionese", "ketchup", "mostarda"],
    "Xegg": ["pão", "hamburguer", "ovo", "presunto", "queijo", "alface", "vinagrete", "maionese", "mostarda"],
    "Xmilho": ["pão", "hamburguer", "milho", "queijo", "presunto", "vinagrete", "alface", "maionese", "ketchup", "mostarda"],
    "X Calabresa": ["pão", "calabresa", "queijo", "maionese", "mostarda", "ketchup", "vinagrete", "alface"],
    "Xbacon": ["hamburguer", "bacon", "queijo", "vinagrete", "alface", "maionese", "mostarda", "ketchup"],
    "Xfrango": ["frango", "presunto", "queijo", "maionese", "ketchup", "alface", "vinagrete"]
}


# Classe para a Interface do Sistema usando Tkinter
class InterfaceSistema:
    def __init__(self, master):
        self.master = master
        self.master.title("Sistema de Gestão de Pedidos - Lanchonete")
        self.master.geometry("900x600")
        self.master.config(bg="#f4f4f9")

        # Lista de ingredientes (para simular um "estoque")
        self.ingredientes = [
            Ingrediente("pão", "Alimento", 50, "unidade", 10),
            Ingrediente("salsicha", "Alimento", 3.36, "kg", 0.5),  # 1 salsicha = 112g, 3.36kg/112g = 30 salsichas
            Ingrediente("vinagrete", "Condimento", 1000, "g", 0.5),  # 1 porção = 50g, temos 1000g no estoque
            Ingrediente("maionese", "Condimento", 1000, "ml", 0.5),  # 1 porção = 40ml
            Ingrediente("ketchup", "Condimento", 1000, "ml", 0.5),  # 1 porção = 40ml
            Ingrediente("mostarda", "Condimento", 1000, "ml", 0.5),  # 1 porção = 30ml
            Ingrediente("batata palha", "Alimento", 200, "g", 0.5),  # 1 porção = 10g
            Ingrediente("hamburguer", "Carne", 2.2, "kg", 0.5),  # 1 hamburguer = 110g
            Ingrediente("queijo", "Lácteo", 4.5, "kg", 0.5),  # 1 porção = 90g
            Ingrediente("presunto", "Carne", 3.6, "kg", 0.5),  # 1 porção = 120g
            Ingrediente("tomate", "Legume", 1, "kg", 0.5),  # 1 porção = 30g
            Ingrediente("alface", "Legume", 1, "kg", 0.5),  # 1 porção = 30g
            Ingrediente("ovo", "Alimento", 30, "unidade", 0.5),  # 1 porção = 2 ovos
            Ingrediente("milho", "Legume", 1, "kg", 0.5),  # 1 porção = 40g
            Ingrediente("calabresa", "Carne", 1, "kg", 0.5),  # 1 porção = 50g
            Ingrediente("bacon", "Carne", 1, "kg", 0.5),  # 1 porção = 50g
            Ingrediente("frango", "Carne", 1.44, "kg", 0.5)  # 1 porção = 120g
        ]

        # Componente para exibir o estoque
        self.criar_componentes()

    def criar_componentes(self):
        # Grid Layout para organizar os elementos
        self.master.grid_columnconfigure(0, weight=2)
        self.master.grid_columnconfigure(1, weight=3)
        self.master.grid_rowconfigure(0, weight=1)
        self.master.grid_rowconfigure(1, weight=1)
        self.master.grid_rowconfigure(2, weight=1)
        self.master.grid_rowconfigure(3, weight=1)

        # Estoque à esquerda
        self.estoque_frame = tk.Frame(self.master, bg="#f4f4f9")
        self.estoque_frame.grid(row=0, column=0, rowspan=3, padx=20, pady=20, sticky="nsew")

        # Título da Tabela de Estoque
        tk.Label(self.estoque_frame, text="Estoque de Ingredientes", font=("Arial", 14, "bold"), bg="#f4f4f9").pack(pady=10)

        # Criação da Tabela de Estoque com Treeview
        self.treeview = ttk.Treeview(self.estoque_frame, columns=("Ingrediente", "Quantidade", "Categoria", "Unidade"), show="headings", height=12)
        self.treeview.pack(fill=tk.BOTH, expand=True)

        # Definir as colunas
        self.treeview.heading("Ingrediente", text="Ingrediente")
        self.treeview.heading("Quantidade", text="Quantidade")
        self.treeview.heading("Categoria", text="Categoria")
        self.treeview.heading("Unidade", text="Unidade")
        self.treeview.column("Ingrediente", width=150, anchor=tk.W)
        self.treeview.column("Quantidade", width=100, anchor=tk.CENTER)
        self.treeview.column("Categoria", width=120, anchor=tk.W)
        self.treeview.column("Unidade", width=100, anchor=tk.W)

        # Preencher a Tabela de Estoque
        self.atualizar_estoque_tabela()

        # Painel de Pedidos no centro
        self.pedido_frame = tk.Frame(self.master, bg="#f4f4f9")
        self.pedido_frame.grid(row=0, column=1, padx=20, pady=20)

        # Título do Painel de Pedidos
        tk.Label(self.pedido_frame, text="Painel de Pedidos", font=("Arial", 16, "bold"), bg="#f4f4f9").pack(pady=20)

        # Cardápio de Lanches
        tk.Label(self.pedido_frame, text="Escolha um Lanche:", font=("Arial", 14), bg="#f4f4f9").pack(pady=5)
        self.lanches_var = tk.StringVar(value=list(cardapio.keys()))
        self.listbox_lanches = tk.Listbox(self.pedido_frame, listvariable=self.lanches_var, height=6, selectmode=tk.SINGLE, font=("Arial", 12))
        self.listbox_lanches.pack(pady=10)

        # Quantidade
        tk.Label(self.pedido_frame, text="Quantidade:", font=("Arial", 12), bg="#f4f4f9").pack(pady=5)
        self.quantidade_var = tk.IntVar()
        self.quantidade_entry = tk.Entry(self.pedido_frame, textvariable=self.quantidade_var, font=("Arial", 12))
        self.quantidade_entry.pack(pady=10)

        # Botão para registrar o pedido
        tk.Button(self.pedido_frame, text="Registrar Pedido", command=self.registrar_pedido, bg="#4CAF50", fg="white", font=("Arial", 12), relief="solid", width=20).pack(pady=20)

        # Botão para adicionar ingredientes
        tk.Button(self.pedido_frame, text="Adicionar Ingrediente", command=self.adicionar_ingrediente, bg="#ff9800", fg="white", font=("Arial", 12), relief="solid", width=20).pack(pady=10)

    def atualizar_estoque_tabela(self):
        """Atualiza a Tabela de Estoque"""
        for item in self.treeview.get_children():
            self.treeview.delete(item)
        
        for ingrediente in self.ingredientes:
            self.treeview.insert("", "end", values=(ingrediente.nome, f"{ingrediente.quantidade} {ingrediente.unidade}", ingrediente.categoria, ingrediente.unidade))

    def registrar_pedido(self):
        """Simula o registro de um pedido, atualizando o estoque"""
        lanche_selecionado = self.listbox_lanches.get(tk.ACTIVE)
        quantidade = self.quantidade_var.get()

        if lanche_selecionado:
            ingredientes_necessarios = cardapio[lanche_selecionado]
            for ingrediente_nome in ingredientes_necessarios:
                ingrediente = next((i for i in self.ingredientes if i.nome == ingrediente_nome), None)
                if ingrediente and ingrediente.quantidade >= quantidade:
                    ingrediente.quantidade -= quantidade  # Subtrai a quantidade do estoque
                else:
                    messagebox.showwarning("Estoque Insuficiente", f"Estoque insuficiente para {ingrediente_nome}.")
                    return
            self.atualizar_estoque_tabela()
            messagebox.showinfo("Pedido Registrado", f"Pedido de {quantidade} {lanche_selecionado}(s) registrado com sucesso!")
        else:
            messagebox.showwarning("Seleção de Lanche", "Por favor, selecione um lanche!")

    def adicionar_ingrediente(self):
        """Abre a janela para adicionar um ingrediente ao estoque"""
        add_window = tk.Toplevel(self.master)
        add_window.title("Adicionar Ingrediente ao Estoque")
        add_window.geometry("400x400")
        add_window.config(bg="#f4f4f9")

        # Ingredientes disponíveis
        tk.Label(add_window, text="Escolha o Ingrediente e Adicione a Quantidade:", font=("Arial", 14), bg="#f4f4f9").pack(pady=10)

        self.ingrediente_var = tk.StringVar(value=[ingrediente.nome for ingrediente in self.ingredientes])
        self.lista_ingredientes = tk.Listbox(add_window, listvariable=self.ingrediente_var, height=6, selectmode=tk.SINGLE, font=("Arial", 12))
        self.lista_ingredientes.pack(pady=10)

        # Quantidade a ser adicionada
        tk.Label(add_window, text="Quantidade a Adicionar:", font=("Arial", 12), bg="#f4f4f9").pack(pady=10)
        self.quantidade_ingrediente_var = tk.IntVar()
        self.quantidade_ingrediente_entry = tk.Entry(add_window, textvariable=self.quantidade_ingrediente_var, font=("Arial", 12))
        self.quantidade_ingrediente_entry.pack(pady=10)

        # Botão para adicionar ingrediente
        def adicionar():
            nome_ingrediente = self.lista_ingredientes.get(tk.ACTIVE)
            quantidade_adicionar = self.quantidade_ingrediente_var.get()

            if nome_ingrediente and quantidade_adicionar > 0:
                ingrediente = next((i for i in self.ingredientes if i.nome == nome_ingrediente), None)
                if ingrediente:
                    ingrediente.quantidade += quantidade_adicionar  # Adiciona a quantidade ao estoque
                    messagebox.showinfo("Estoque Atualizado", f"{quantidade_adicionar} unidades de {nome_ingrediente} adicionadas ao estoque.")
                    self.atualizar_estoque_tabela()  # Atualiza a interface com o novo estoque
                    add_window.destroy()  # Fecha a janela após adicionar
                else:
                    messagebox.showwarning("Ingrediente Não Encontrado", f"O ingrediente {nome_ingrediente} não foi encontrado no estoque.")
            else:
                messagebox.showwarning("Dados Inválidos", "Por favor, insira um nome de ingrediente válido e a quantidade a ser adicionada!")

        # Botão para adicionar ao estoque
        tk.Button(add_window, text="Adicionar ao Estoque", command=adicionar, bg="#4CAF50", fg="white", font=("Arial", 12), relief="solid", width=20).pack(pady=10)


# Inicialização da janela principal
root = tk.Tk()
app = InterfaceSistema(root)
root.mainloop()
